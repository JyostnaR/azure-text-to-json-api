<!--
    IMPORTANT: This policy implements rate limiting and quota management for the API.
    It should be applied at the API or operation level to control usage.
-->
<policies>
    <inbound>
        <!-- Rate Limiting by Subscription -->
        <rate-limit-by-key 
            calls="1000" 
            renewal-period="3600" 
            counter-key="@(context.Subscription.Id)"
            remaining-calls-variable-name="remaining-calls-subscription"
            total-calls-variable-name="total-calls-subscription" />

        <!-- Rate Limiting by IP Address -->
        <rate-limit-by-key 
            calls="100" 
            renewal-period="60" 
            counter-key="@(context.Request.Headers.GetValueOrDefault("X-Forwarded-For", "unknown"))"
            remaining-calls-variable-name="remaining-calls-ip"
            total-calls-variable-name="total-calls-ip" />

        <!-- Rate Limiting by User (if authenticated) -->
        <choose>
            <when condition="@(context.Request.Headers.ContainsKey("Authorization"))">
                <rate-limit-by-key 
                    calls="500" 
                    renewal-period="3600" 
                    counter-key="@(context.Request.Headers.GetValueOrDefault("Authorization", ""))"
                    remaining-calls-variable-name="remaining-calls-user"
                    total-calls-variable-name="total-calls-user" />
            </when>
        </choose>

        <!-- Add rate limit headers to response -->
        <set-header name="X-RateLimit-Limit-Subscription" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault<int>("total-calls-subscription"))</value>
        </set-header>
        <set-header name="X-RateLimit-Remaining-Subscription" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault<int>("remaining-calls-subscription"))</value>
        </set-header>
        <set-header name="X-RateLimit-Limit-IP" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault<int>("total-calls-ip"))</value>
        </set-header>
        <set-header name="X-RateLimit-Remaining-IP" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault<int>("remaining-calls-ip"))</value>
        </set-header>

        <!-- Log rate limit information -->
        <log-to-eventhub logger-id="txt2json-logger">
            Rate Limit Info:
            Subscription: <@(context.Variables.GetValueOrDefault<int>("remaining-calls-subscription"))> / <@(context.Variables.GetValueOrDefault<int>("total-calls-subscription"))>
            IP: <@(context.Variables.GetValueOrDefault<int>("remaining-calls-ip"))> / <@(context.Variables.GetValueOrDefault<int>("total-calls-ip"))>
            User: <@(context.Variables.GetValueOrDefault<int>("remaining-calls-user"))> / <@(context.Variables.GetValueOrDefault<int>("total-calls-user"))>
            Client IP: <@(context.Request.Headers.GetValueOrDefault("X-Forwarded-For", "unknown"))>
        </log-to-eventhub>
    </inbound>
    
    <backend>
        <!-- Forward request to backend -->
    </backend>
    
    <outbound>
        <!-- Forward rate limit headers to client -->
    </outbound>
    
    <on-error>
        <!-- Handle rate limit exceeded errors -->
        <choose>
            <when condition="@(context.LastError.Reason == "Rate limit is exceeded")">
                <return-response>
                    <set-status code="429" reason="Too Many Requests" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-header name="Retry-After" exists-action="override">
                        <value>60</value>
                    </set-header>
                    <set-body>{
                        "error": "Too Many Requests",
                        "message": "Rate limit exceeded. Please try again later.",
                        "retryAfter": 60,
                        "correlationId": "@(context.Request.Headers.GetValueOrDefault("X-Correlation-ID", ""))",
                        "timestamp": "@(DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"))"
                    }</set-body>
                </return-response>
            </when>
        </choose>
    </on-error>
</policies>
